@using System.Collections.Specialized
@using Test_Project_IdentityMVC.Models
@using PagedList.Mvc
@model PagedList.IPagedList<Test_Project_IdentityMVC.Models.Product>

@{
    ViewBag.Title = "Index";
    var resCloud = "https://res.cloudinary.com/namnguyen159198/";
    Layout = "~/Views/Admin/Layout/_Layout2.cshtml";
    var Iconsort = ViewBag.SortIcon;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
    .padding {
        padding-top: 10px;
        padding-bottom: 20px;
    }
</style>
<div class="content-wrapper">
    <p class="border-primary">

        <div class="row padding">
            <div class="col-md-7">
                <form action="/Products/Index" method="get" name="search-form">
                    <div class="row">
                        <div class="col-md-3">
                            <h4 class="card-title"> Keyword</h4>
                        </div>
                        <div class="col-md-9">
                            <div class="row">
                                <div class="col-md-6">
                                    <input type="text" name="keyword" value="" class="form-control" />
                                    <input type="hidden" name="start" value="" />
                                    <input type="hidden" name="end" value="" />
                                    <input type="hidden" name="sortOrder" value="" />
                                </div>

                            </div>


                        </div>
                    </div>
                    <div class="row padding">
                        <div class="col-md-3">
                        <h4 class="card-title"> Status</h4> 
                        </div>
                        <div class="col-md-9">
                            @Html.DropDownList("status",
                                EnumHelper.GetSelectList(typeof(Product.EnumStatus)),
                                "Select Status",
                                new { @class = "form-control" })
                            <input type="submit" value="Search" class="btn btn-primary" style="margin-top: 20px" />
                        </div>
                    </div>

                </form>
            </div>
            <div class="row col-md-5">
                <div class="col-md-3">
                    <h4 class="card-title"> Time</h4>
                </div>
                <div class="col-md-9">
                    <form action="/Products/Index" method="get">
                        <input type="text" name="daterange" value="" class="form-control fa fa-clock-o"/>
                    </form>
                </div>
                
            </div>

        </div>
    </p>
    <span class="border-primary btn mb-5">
        @Html.ActionLink("Create New", "Create")
    </span>
    <div class="grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Product Table</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>
                                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm })
                                <i class="@Iconsort" aria-hidden="true"></i>
                            </th>
                            <th>
                                @Html.ActionLink("Price", "Index", new { sortOrder = ViewBag.PriceSortParm })
                                <i class="@Iconsort" aria-hidden="true"></i>
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Thumbnails)
                            </th>
                            <th>
                                @Html.ActionLink("Create At", "Index", new { sortOrder = ViewBag.DateSortParm })
                                <i class="@Iconsort " aria-hidden="true"></i>
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model[0].Status)
                            </th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Price)
                                </td>
                                <td>
                                    <img src="@item.GetDefaultThumbnails()" style="width:100px ; height:100px" alt="Alternate" class="img-thumbnail" width="300" height="300" />

                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.CreatedAt)
                                </td>
                                <td>
                                    @item.Status

                                </td>
                                <td>
                                    <a href="@Url.Action("Details", "Products", new { id = item.Id })" class="btn btn-sm btn-outline-primary border-primary"><i class=" fa fa-eye"></i></a>
                                    <a href="@Url.Action("Edit", "Products", new { id = item.Id })" class="btn btn-sm btn-outline-success border-success"><i class="fa fa-pencil"></i></a>
                                    <a href="@Url.Action("Delete", "Products", new { id = item.Id })" class="btn btn-sm btn-outline-danger js-sweetalert border-danger" title="Delete" data-type="confirm"><i class="fa fa-trash"></i></a>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>

                @Html.PagedListPager(Model, page => Url.Action("Index",
                    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
            </div>
        </div>
    </div>


</div>
@section scripts{
    <script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script type="text/javascript">

        var start = moment().subtract(29, 'days');
        var end = moment();
        // Lấy đoạn link href
        var url_string = location.href;
        var url = new URL(url_string);
        // Cắt đoạn biến trong herf
        var initStart = url.searchParams.get("start");
        var initEnd = url.searchParams.get("end");
        var keyword = url.searchParams.get("keyword");
        var sortOrder = url.searchParams.get("sortOrder");
        // Nếu khác null và đúng định dạng datetime YYY-MM-DD
        if (initStart != null && moment(initStart, 'YYYY-MM-DD', true).isValid()) {
            // Gán biến cho start trong thẻ input
            start = initStart;
            $('input[name="start"]').val(start);
        }
        if (initEnd != null && moment(initEnd, 'YYYY-MM-DD', true).isValid()) {
            end = initEnd;
            $('input[name="end"]').val(end);
        }
        if (keyword != null) {
            $('input[name="keyword"]').val(keyword);
        }
        if (sortOrder != null) {
            $('input[name="sortOrder"]').val(keyword);
        }

        $('input[name="daterange"]').daterangepicker({
            startDate: start,
            endDate: end,
            locale: {
                format: 'YYYY-MM-DD'
            },
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [
                    moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')
                ]
            }
        });

        $('input[name="daterange"]').on('apply.daterangepicker',
            function (ev, picker) {
                var startDate = picker.startDate.format('YYYY-MM-DD');
                var endDate = picker.endDate.format('YYYY-MM-DD');
                $('input[name="start"]').val(startDate);
                $('input[name="end"]').val(endDate);
                $('form[name="search-form"]').submit();
            });
        $('select[name="status"]').change(function () {
            $('form[name="search-form"]').submit();
        });
        $('.paginate-number').click(function () {
            $('input[name="page"]').val($(this).attr('title'));
            $('form[name="search-form"]').submit();
        });
    </script>


}
